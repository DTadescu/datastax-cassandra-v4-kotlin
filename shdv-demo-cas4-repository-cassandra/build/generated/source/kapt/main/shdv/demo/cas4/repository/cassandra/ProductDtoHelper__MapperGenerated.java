package shdv.demo.cas4.repository.cassandra;

import com.datastax.oss.driver.api.core.CqlIdentifier;
import com.datastax.oss.driver.api.core.data.GettableByName;
import com.datastax.oss.driver.api.core.data.SettableByName;
import com.datastax.oss.driver.api.core.metadata.schema.KeyspaceMetadata;
import com.datastax.oss.driver.api.core.metadata.schema.TableMetadata;
import com.datastax.oss.driver.api.core.type.DataType;
import com.datastax.oss.driver.api.core.type.UserDefinedType;
import com.datastax.oss.driver.api.core.type.reflect.GenericType;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.MapperException;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.api.querybuilder.QueryBuilder;
import com.datastax.oss.driver.api.querybuilder.delete.Delete;
import com.datastax.oss.driver.api.querybuilder.delete.DeleteSelection;
import com.datastax.oss.driver.api.querybuilder.insert.InsertInto;
import com.datastax.oss.driver.api.querybuilder.insert.RegularInsert;
import com.datastax.oss.driver.api.querybuilder.relation.Relation;
import com.datastax.oss.driver.api.querybuilder.select.Select;
import com.datastax.oss.driver.api.querybuilder.select.SelectFrom;
import com.datastax.oss.driver.api.querybuilder.update.UpdateStart;
import com.datastax.oss.driver.internal.mapper.entity.EntityHelperBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import com.datastax.oss.driver.shaded.guava.common.collect.ImmutableList;
import java.lang.Class;
import java.lang.Double;
import java.lang.IllegalArgumentException;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
public class ProductDtoHelper__MapperGenerated extends EntityHelperBase<ProductDto> {
  private static final Logger LOG = LoggerFactory.getLogger(ProductDtoHelper__MapperGenerated.class);

  private static final GenericType<Double> GENERIC_TYPE = new GenericType<Double>(){};

  private static final GenericType<String> GENERIC_TYPE1 = new GenericType<String>(){};

  private static final GenericType<LocalDate> GENERIC_TYPE2 = new GenericType<LocalDate>(){};

  private final List<String> primaryKeys;

  public ProductDtoHelper__MapperGenerated(MapperContext context) {
    super(context, "product_dto");
    LOG.debug("[{}] Entity ProductDto will be mapped to {}{}",
        context.getSession().getName(),
        getKeyspaceId() == null ? "" : getKeyspaceId() + ".",
        getTableId());
    this.primaryKeys = ImmutableList.<String>builder()
        .add("id")
        .build();
  }

  @Override
  public Class<ProductDto> getEntityClass() {
    return ProductDto.class;
  }

  @Override
  public <SettableT extends SettableByName<SettableT>> SettableT set(ProductDto entity,
      SettableT target, NullSavingStrategy nullSavingStrategy) {

    if (entity.getId() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("id", entity.getId(), String.class);
    }

    if (entity.getName() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("name", entity.getName(), String.class);
    }

    if (entity.getPrice() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("price", entity.getPrice(), Double.class);
    }

    if (entity.getDescription() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("description", entity.getDescription(), String.class);
    }

    if (entity.getCreated() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("created", entity.getCreated(), LocalDate.class);
    }

    if (entity.getLastWatch() != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      target = target.set("last_watch", entity.getLastWatch(), String.class);
    }

    return target;
  }

  @Override
  public ProductDto get(GettableByName source) {

    String propertyValue = source.get("id", String.class);

    String propertyValue1 = source.get("name", String.class);

    Double propertyValue2 = source.get("price", Double.class);

    String propertyValue3 = source.get("description", String.class);

    LocalDate propertyValue4 = source.get("created", LocalDate.class);

    String propertyValue5 = source.get("last_watch", String.class);
    return new ProductDto(
        propertyValue,
        propertyValue1,
        propertyValue2,
        propertyValue3,
        propertyValue4,
        propertyValue5);
  }

  @Override
  public RegularInsert insert() {
    throwIfKeyspaceMissing();
    InsertInto insertInto = (keyspaceId == null)
        ? QueryBuilder.insertInto(tableId)
        : QueryBuilder.insertInto(keyspaceId, tableId);
    return insertInto
        .value("id", QueryBuilder.bindMarker("id"))
        .value("name", QueryBuilder.bindMarker("name"))
        .value("price", QueryBuilder.bindMarker("price"))
        .value("description", QueryBuilder.bindMarker("description"))
        .value("created", QueryBuilder.bindMarker("created"))
        .value("last_watch", QueryBuilder.bindMarker("last_watch"));
  }

  public Select selectByPrimaryKeyParts(int parameterCount) {
    Select select = selectStart();
    for (int i = 0; i < parameterCount && i < primaryKeys.size(); i++) {
      String columnName = primaryKeys.get(i);
      select = select.whereColumn(columnName).isEqualTo(QueryBuilder.bindMarker(columnName));
    }
    return select;
  }

  @Override
  public Select selectByPrimaryKey() {
    return selectByPrimaryKeyParts(primaryKeys.size());
  }

  @Override
  public Select selectStart() {
    throwIfKeyspaceMissing();
    SelectFrom selectFrom = (keyspaceId == null)
        ? QueryBuilder.selectFrom(tableId)
        : QueryBuilder.selectFrom(keyspaceId, tableId);
    return selectFrom
        .column("id")
        .column("name")
        .column("price")
        .column("description")
        .column("created")
        .column("last_watch");
  }

  public DeleteSelection deleteStart() {
    throwIfKeyspaceMissing();
    return (keyspaceId == null)
        ? QueryBuilder.deleteFrom(tableId)
        : QueryBuilder.deleteFrom(keyspaceId, tableId);
  }

  public Delete deleteByPrimaryKeyParts(int parameterCount) {
    if (parameterCount <= 0) {
      throw new MapperException("parameterCount must be greater than 0");
    }
    DeleteSelection deleteSelection = deleteStart();
    String columnName = primaryKeys.get(0);
    Delete delete = deleteSelection.whereColumn(columnName).isEqualTo(QueryBuilder.bindMarker(columnName));
    for (int i = 1; i < parameterCount && i < primaryKeys.size(); i++) {
      columnName = primaryKeys.get(i);
      delete = delete.whereColumn(columnName).isEqualTo(QueryBuilder.bindMarker(columnName));
    }
    return delete;
  }

  @Override
  public Delete deleteByPrimaryKey() {
    return deleteByPrimaryKeyParts(primaryKeys.size());
  }

  @Override
  public DefaultUpdate updateStart() {
    throwIfKeyspaceMissing();
    UpdateStart update = (keyspaceId == null)
        ? QueryBuilder.update(tableId)
        : QueryBuilder.update(keyspaceId, tableId);
    return ((DefaultUpdate)update
        .setColumn("name", QueryBuilder.bindMarker("name"))
        .setColumn("price", QueryBuilder.bindMarker("price"))
        .setColumn("description", QueryBuilder.bindMarker("description"))
        .setColumn("created", QueryBuilder.bindMarker("created"))
        .setColumn("last_watch", QueryBuilder.bindMarker("last_watch")));
  }

  @Override
  public DefaultUpdate updateByPrimaryKey() {
    return ((DefaultUpdate)updateStart()
        .where(Relation.column("id").isEqualTo(QueryBuilder.bindMarker("id"))));
  }

  @Override
  public void validateEntityFields() {
    CqlIdentifier keyspaceId = this.keyspaceId != null ? this.keyspaceId : context.getSession().getKeyspace().orElse(null);
    String entityClassName = "shdv.demo.cas4.repository.cassandra.ProductDto";
    if (keyspaceId == null) {
      LOG.warn("[{}] Unable to validate table: {} for the entity class: {} because the keyspace is unknown (the entity does not declare a default keyspace, and neither the session nor the DAO were created with a keyspace). The DAO will only work if it uses fully-qualified queries with @Query or @QueryProvider.",
          context.getSession().getName(),
          tableId,
          entityClassName);
      return;
    }
    if(!keyspaceNamePresent(context.getSession().getMetadata().getKeyspaces(), keyspaceId)) {
      LOG.warn("[{}] Unable to validate table: {} for the entity class: {} because the session metadata has no information about the keyspace: {}.",
          context.getSession().getName(),
          tableId,
          entityClassName,
          keyspaceId);
      return;
    }
    Optional<KeyspaceMetadata> keyspace = context.getSession().getMetadata().getKeyspace(keyspaceId);
    List<CqlIdentifier> expectedCqlNames = new ArrayList<>();
    expectedCqlNames.add(CqlIdentifier.fromCql("id"));
    expectedCqlNames.add(CqlIdentifier.fromCql("name"));
    expectedCqlNames.add(CqlIdentifier.fromCql("price"));
    expectedCqlNames.add(CqlIdentifier.fromCql("description"));
    expectedCqlNames.add(CqlIdentifier.fromCql("created"));
    expectedCqlNames.add(CqlIdentifier.fromCql("last_watch"));
    Optional<TableMetadata> tableMetadata = keyspace.flatMap(v -> v.getTable(tableId));
    Optional<UserDefinedType> userDefinedType = keyspace.flatMap(v -> v.getUserDefinedType(tableId));
    if (tableMetadata.isPresent()) {
      // validation of missing PKs
      List<CqlIdentifier> expectedCqlPKs = new ArrayList<>();
      expectedCqlPKs.add(CqlIdentifier.fromCql("id"));
      List<CqlIdentifier> missingTablePksNames = findMissingColumns(expectedCqlPKs, tableMetadata.get().getPartitionKey());
      if (!missingTablePksNames.isEmpty()) {
        throw new IllegalArgumentException(String.format("The CQL ks.table: %s.%s has missing Primary Key columns: %s that are defined in the entity class: %s", keyspaceId, tableId, missingTablePksNames, entityClassName));
      }
      // validation of all columns
      List<CqlIdentifier> missingTableCqlNames = findMissingCqlIdentifiers(expectedCqlNames, tableMetadata.get().getColumns().keySet());
      if (!missingTableCqlNames.isEmpty()) {
        throw new IllegalArgumentException(String.format("The CQL ks.table: %s.%s has missing columns: %s that are defined in the entity class: %s", keyspaceId, tableId, missingTableCqlNames, entityClassName));
      }
      // validation of types
      Map<CqlIdentifier, GenericType<?>> expectedTypesPerColumn = new LinkedHashMap<>();
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("price"), GENERIC_TYPE);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("last_watch"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("id"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("created"), GENERIC_TYPE2);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("name"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("description"), GENERIC_TYPE1);
      List<String> missingTableTypes = findTypeMismatches(expectedTypesPerColumn, tableMetadata.get().getColumns(), context.getSession().getContext().getCodecRegistry());
      throwMissingTableTypesIfNotEmpty(missingTableTypes, keyspaceId, tableId, entityClassName);
    }
    else if (userDefinedType.isPresent()) {
      // validation of UDT columns
      List<CqlIdentifier> columns = userDefinedType.get().getFieldNames();
      List<CqlIdentifier> missingTableCqlNames = findMissingCqlIdentifiers(expectedCqlNames, columns);
      if (!missingTableCqlNames.isEmpty()) {
        throw new IllegalArgumentException(String.format("The CQL ks.udt: %s.%s has missing columns: %s that are defined in the entity class: %s", keyspaceId, tableId, missingTableCqlNames, entityClassName));
      }
      // validation of UDT types
      Map<CqlIdentifier, GenericType<?>> expectedTypesPerColumn = new LinkedHashMap<>();
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("price"), GENERIC_TYPE);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("last_watch"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("id"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("created"), GENERIC_TYPE2);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("name"), GENERIC_TYPE1);
      expectedTypesPerColumn.put(CqlIdentifier.fromCql("description"), GENERIC_TYPE1);
      List<CqlIdentifier> expectedColumns = userDefinedType.get().getFieldNames();
      List<DataType> expectedTypes = userDefinedType.get().getFieldTypes();
      List<String> missingTableTypes = findTypeMismatches(expectedTypesPerColumn, expectedColumns, expectedTypes, context.getSession().getContext().getCodecRegistry());
      throwMissingUdtTypesIfNotEmpty(missingTableTypes, keyspaceId, tableId, entityClassName);
    }
    // warn if there is not keyspace.table for defined entity - it means that table is missing, or schema it out of date.
    else {
      LOG.warn("[{}] There is no ks.table or UDT: {}.{} for the entity class: {}, or metadata is out of date.",
          context.getSession().getName(),
          keyspaceId,
          tableId,
          entityClassName);
    }
  }
}
